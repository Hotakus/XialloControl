name: "publish"

on:
  push:
    tags: ["v*"]
    branches:
      - release
  workflow_dispatch:
  pull_request:
    branches:
      - master

jobs:
  # ----------------------------------------------------
  # 步骤 1: 生成 Changelog
  # ----------------------------------------------------
  generate-changelog:
    name: Generate Changelog
    permissions:
      contents: read
      pull-requests: read
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    outputs:
      changelog: ${{ steps.changelog_builder.outputs.changelog }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Build Changelog
        id: changelog_builder
        uses: mikepenz/release-changelog-builder-action@v5
        with:
          configuration: ".github/workflows/changelog_config.json"
          token: ${{ secrets.GITHUB_TOKEN }}
          failOnError: true
          owner: 'Hotakus'
          repo: 'XialloControl'
          mode: 'PR'
      - name: Print Changelog
        run: |
          echo "Changelog: ${{ steps.changelog_builder.outputs.changelog }}"

  # ----------------------------------------------------
  # 步骤 2: 构建 & 发布 Tauri
  # ----------------------------------------------------
  publish-tauri:
    needs: generate-changelog
    permissions:
      contents: write   # 用于发布 Release
    strategy:
      fail-fast: true
      matrix:
        include:
          - platform: "ubuntu-latest"
            args: "--target x86_64-unknown-linux-gnu"
            target: "x86_64-unknown-linux-gnu"
          - platform: "ubuntu-latest"
            args: "--target aarch64-unknown-linux-gnu"
            target: "aarch64-unknown-linux-gnu"
          - platform: "windows-latest"
            args: "--target x86_64-pc-windows-msvc"
            target: "x86_64-pc-windows-msvc"
      #          - platform: "macos-latest"
      #            args: "--target x86_64-apple-darwin"
      #          - platform: "macos-latest"
      #            args: "--target aarch64-apple-darwin"

    runs-on: ${{ matrix.platform }}
    steps:
      # Checkout
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      # Rust Toolchain + Cache
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Add Rust Target
        run: rustup target add ${{ matrix.target }}

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
          workspaces: |
            src-tauri -> ../../target

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false
          version: 10

      - name: Pnpm install and check
        run: |
          pnpm i
          pnpm tauri info

      # System deps (Ubuntu only)
      - name: Install system dependencies (Ubuntu only)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libayatana-appindicator3-dev librsvg2-dev patchelf pkg-config libudev-dev

      - name: "Install aarch64 tools (Ubuntu only)"
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt install -y \
            gcc-aarch64-linux-gnu \
            g++-aarch64-linux-gnu

      - name: "Install armv7 tools (Ubuntu only)"
        if: matrix.target == 'armv7-unknown-linux-gnueabihf'
        run: |
          sudo apt install -y \
            gcc-arm-linux-gnueabihf \
            g++-arm-linux-gnueabihf

      - name: Set up PKG_CONFIG for cross-compilation (Ubuntu only)
        if: matrix.platform == 'ubuntu-latest' && (matrix.target == 'aarch64-unknown-linux-gnu' || matrix.target == 'armv7-unknown-linux-gnueabihf')
        run: |
          # 首先安装目标架构的一些基本开发库（如果可用）
          # 注意：这需要你已配置了多架构支持（dpkg --add-architecture arm64 && apt update）
          sudo apt-get install -y libglib2.0-dev:arm64 # 例如，安装 arm64 版本的 glib dev 文件
          # 设置环境变量
          export PKG_CONFIG_ALLOW_CROSS=1
          if [ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]; then
            # 假设你的 sysroot 在 /usr/aarch64-linux-gnu， .pc 文件在 /usr/lib/aarch64-linux-gnu/pkgconfig
            # 请务必检查这些路径在你的构建环境中是否存在且包含正确的内容！
            TARGET_SYSROOT="/usr/aarch64-linux-gnu"
            TARGET_PKG_CONFIG_PATH="/usr/lib/aarch64-linux-gnu/pkgconfig"
            export PKG_CONFIG_SYSROOT_DIR=$TARGET_SYSROOT
            export PKG_CONFIG_PATH=$TARGET_PKG_CONFIG_PATH:$PKG_CONFIG_PATH
            # 如果有交叉编译的 pkg-config 包装器，也可以设置 PKG_CONFIG
            # export PKG_CONFIG="aarch64-linux-gnu-pkg-config"
          elif [ "${{ matrix.target }}" == "armv7-unknown-linux-gnueabihf" ]; then
            TARGET_SYSROOT="/usr/arm-linux-gnueabihf"
            TARGET_PKG_CONFIG_PATH="/usr/lib/arm-linux-gnueabihf/pkgconfig"
            export PKG_CONFIG_SYSROOT_DIR=$TARGET_SYSROOT
            export PKG_CONFIG_PATH=$TARGET_PKG_CONFIG_PATH:$PKG_CONFIG_PATH
            # export PKG_CONFIG="arm-linux-gnueabihf-pkg-config"
          else
            echo "No need to set PKG_CONFIG for target ${{ matrix.target }}"
          fi
          # 打印设置以供调试
          echo "PKG_CONFIG_SYSROOT_DIR is set to: $PKG_CONFIG_SYSROOT_DIR"
          echo "PKG_CONFIG_PATH is set to: $PKG_CONFIG_PATH"
          # 尝试列出目标平台的 glib 相关 .pc 文件，检查配置是否有效
          pkg-config --list-all | grep glib || echo "pkg-config may not be configured correctly for target."

      # Build & Release
      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ""
        with:
          tagName: ${{ startsWith(github.ref, 'refs/tags/') && 'v__VERSION__' || '' }}
          releaseName: "XialloControl Release v__VERSION__"
          releaseBody: ${{ needs.generate-changelog.outputs.changelog }}
          releaseDraft: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
#          updaterJsonKeepUniversal: true
#          tauriScript: pnpm
          args: --target ${{ matrix.target }}

